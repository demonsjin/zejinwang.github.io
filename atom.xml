<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wang&#39;s Blog</title>
  
  <subtitle>Welcome here!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zejinwang.com/"/>
  <updated>2019-07-07T13:22:59.642Z</updated>
  <id>https://zejinwang.com/</id>
  
  <author>
    <name>ZejinWang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解KL散度(相对熵)</title>
    <link href="https://zejinwang.com/2019/07/07/%E7%90%86%E8%A7%A3KL%E6%95%A3%E5%BA%A6-%E7%9B%B8%E5%AF%B9%E7%86%B5/"/>
    <id>https://zejinwang.com/2019/07/07/理解KL散度-相对熵/</id>
    <published>2019-07-07T08:14:38.000Z</published>
    <updated>2019-07-07T13:22:59.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>信息熵</strong>：描述随机变量不确定性程度的量，对于连续型随机变量称为微分熵。</p><p>信息熵的表达式</p><script type="math/tex;mode=display">H(x)=-\int p(x)ln^{p(x)}dx</script><p>信息熵可认为是表征编码分布 $p(x)$ 所需要的信息编码长度（单位：nats）。</p><p>当使用另一个编码分布函数 $q(x)$ 去编码 $p(x)$ 分布函数负责编码的信息时，由于$q(x)$和$p(x)$之间可能存在差距，导致编码效率不是最高的，因此会付出额外的一些冗余编码作为代价。对应的<strong>总编码长度(交叉熵)</strong>的计算公式：</p><script type="math/tex;mode=display">H(p,q)=-\int p(x)ln^{q(x)}dx</script><p>$H(p.q)$称为交叉熵(cross entropy)，前后两种分布函数进行编码导致的<strong>编码长度差</strong>就是本文需要强调的<strong>KL散度</strong>。</p><p><strong>KL散度(相对熵)：</strong>量化两种概率分布P和Q之间差异的指标。</p><script type="math/tex;mode=display">KL(p||q)=H(p,q)-H(p)=-\int p(x)ln\frac{q(x)}{p(x)}=\int p(x)ln\frac{p(x)}{q(x)}</script><p><strong>KL散度的性质：</strong></p><ol><li>KL散度大于等于<strong>零</strong>；</li><li>KL散度<strong>不满足对称性</strong>，即$KL(p||q) \neq KL(q||p)$，因此其不是两种分布函数之间的距离度量；</li><li>KL散度在机器学习中的<strong>目标是使其最小</strong>，也就是令<strong>一个参数化的分布q区接近真实的分布p</strong>；</li></ol><blockquote class="blockquote-center"><p><em>Some say the world will end in fire,</em></p><p><em>Some say in ice.</em></p><p><em>From what I’ve tasted of desire</em></p><p><em>I hold with those who favor fire.</em></p><p><em>But if it had to perish twice,</em></p><p><em>I think I know enough of hate</em></p><p><em>To say that for destruction ice</em></p><p><em>Is also great</em></p><p><em>And would suffice.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文对KL散度这方面内容进行介绍
    
    </summary>
    
      <category term="信息论" scheme="https://zejinwang.com/categories/%E4%BF%A1%E6%81%AF%E8%AE%BA/"/>
    
      <category term="KL散度" scheme="https://zejinwang.com/categories/%E4%BF%A1%E6%81%AF%E8%AE%BA/KL%E6%95%A3%E5%BA%A6/"/>
    
    
      <category term="熵" scheme="https://zejinwang.com/tags/%E7%86%B5/"/>
    
      <category term="KL散度" scheme="https://zejinwang.com/tags/KL%E6%95%A3%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>PCA的理解</title>
    <link href="https://zejinwang.com/2019/07/06/PCA%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://zejinwang.com/2019/07/06/PCA的理解/</id>
    <published>2019-07-06T09:41:56.000Z</published>
    <updated>2019-07-07T03:00:22.329Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>有一点很值得强调，PCA算法是一种线性变换，灵活性和表示能力不如自动编码器等采用网络表征形式（既能表征线性变换，也能表征非线性变换）的算法。</strong></p><h1 id="PCA对数据进行预处理的原因"><a href="#PCA对数据进行预处理的原因" class="headerlink" title="PCA对数据进行预处理的原因"></a>PCA对数据进行预处理的原因</h1><p>在机器学习算法和深度学习任务中，经常需要对原始输入数据进行中心化处理和标准化处理。</p><p><strong>数据中心化：</strong></p><p>减去均值等同于<strong>坐标移动</strong>，这样就能把<strong>原始数据点的中心移到与原点重合</strong>，此举有利于很多表达，比如数据的协方差矩阵可以直接写成$XX^T$，若没有减去均值，则每两个特征之间都要进行$(x-\bar{x})(y-\bar{y})$运算，再组合成协方差矩阵。</p><p><strong>数据标准化：</strong></p><p>除以标准差是为了<strong>统一并消除量纲</strong>。一个样本中有多个特征，有些可能表示长度，有些可能表示重量。如果各个特征之间的数值或数量级存在较大差异，就会使得较小的数被淹没，导致主成分偏差较大。所以要将每个特征对应的样本除以标准差，这样才能让他们仅以<strong>数的概念一起比较运算</strong>。</p><p>注意：</p><ol><li>标准化与归一化 标准化指对数据既进行中心化也进行标准化，也就是既减去均值，也除以标准差；而归一化只将原始数据除以标准差，不减去均值；</li><li>对图像进行PCA前数据预处理时，不需要除以<strong>标准差</strong>，即<strong>无需统一量纲</strong>。<strong>理由：</strong>图像的每个pixel的取值范围为[0, 255]，量纲已统一；</li></ol><h1 id="PCA进行降维的心得"><a href="#PCA进行降维的心得" class="headerlink" title="PCA进行降维的心得"></a>PCA进行降维的心得</h1><ul><li><p>在对<strong>文本数据</strong>(如短信)进行PCA降维时，一般将每条文本数据看作一个样本，首先将每条文本数据转化为${k}\times {1} $的词向量($k$为特征数)，则$N$条文本数据对应的数据矩阵$X$的尺寸为$k\times N$。</p><p>文本数据矩阵的元素$X_{ij}$进行标准化：</p><script type="math/tex;mode=display">u_i=\frac{1}{N}\sum_{j=0}^{N-1}{X_{ij}}</script><script type="math/tex;mode=display">\sigma_{i}=\frac{1}{N-1}\sum_{j=0}^{N}(X_{ij}-u_i)</script><script type="math/tex;mode=display">Y_{ij}=(X_{ij}-u_{i})/\sigma_{i}</script></li><li><p>对<strong>图像数据</strong>进行PCA降维时，实际上是在对每个图像样本(即每张图片)进行降维。</p><ol><li>自然图像的$pixel_value~\epsilon [0, 255]$，属于同一量纲，因此不需要除以标准差；</li><li>对每张图片进行pixel_wise中心化时，减去的均值是整张图片的平均值，也就是图片的<strong>平均亮度</strong>，这一点和文本数据的预处理有很大不同；</li><li>预处理完成后，便是对预处理后整张图的数据矩阵$W\times D$进行PCA降维，等同于将行数或列数视作样本数，而列数或行数视作特征数；</li></ol></li></ul><h1 id="深度学习中数据归一化的原因"><a href="#深度学习中数据归一化的原因" class="headerlink" title="深度学习中数据归一化的原因"></a>深度学习中数据归一化的原因</h1><p>首先如果输入层 $ x $ 很大，在back propagation时传递到输入层的梯度就会很大，如下式：</p><script type="math/tex;mode=display">\frac{\partial{E}}{\partial{w_{11}^{2}}}=x_1\delta_1^{(2)}</script><p>如果梯度非常大，学习率就必须非常小（否则会跳过local minimum），因此，学习率（学习率初始值）的选择需要参考输入层的数值，不如直接将数据归一化，这样学习率就不必再根据数据范围作调整。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/ae9db78ebb0f" rel="external nofollow noopener noreferrer" target="_blank">PCA要对数据进行预处理的原因</a></p><p><a href="https://cloud.tencent.com/developer/article/1086268" rel="external nofollow noopener noreferrer" target="_blank">PCA在图像降维的应用</a></p><p><a href="https://www.zhihu.com/question/49096923" rel="external nofollow noopener noreferrer" target="_blank">数据归一化</a></p><blockquote class="blockquote-center"><p><em>Some say the world will end in fire,</em></p><p><em>Some say in ice.</em></p><p><em>From what I’ve tasted of desire</em></p><p><em>I hold with those who favor fire.</em></p><p><em>But if it had to perish twice,</em></p><p><em>I think I know enough of hate</em></p><p><em>To say that for destruction ice</em></p><p><em>Is also great</em></p><p><em>And would suffice.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文对PCA实际用法进行总结
    
    </summary>
    
      <category term="ML" scheme="https://zejinwang.com/categories/ML/"/>
    
    
      <category term="ML" scheme="https://zejinwang.com/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>自编码器(AE)和变分编码器(VAE)</title>
    <link href="https://zejinwang.com/2019/07/06/%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8-AE-%E5%92%8C%E5%8F%98%E5%88%86%E7%BC%96%E7%A0%81%E5%99%A8-VAE/"/>
    <id>https://zejinwang.com/2019/07/06/自编码器-AE-和变分编码器-VAE/</id>
    <published>2019-07-06T09:41:32.000Z</published>
    <updated>2019-07-07T10:11:30.167Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>近期在看<strong>胶囊网络（Capsule Networks）</strong>相关的Survey，发现里面涉及的自编码器相关的内容有点遗忘，本文<em>应运而生</em>…</p><h1 id="无监督预训练网络"><a href="#无监督预训练网络" class="headerlink" title="无监督预训练网络"></a>无监督预训练网络</h1><p><em>无监督</em>，顾名思义，不需要任何标注信息。</p><p>无监督预训练网络可以进一步细分成</p><ul><li>自动编码器</li><li>深度信念网络</li><li>生成对抗网络</li></ul><p>本文主要就自动编码器及其相关进行展开。</p><h1 id="自编码器（AE）"><a href="#自编码器（AE）" class="headerlink" title="自编码器（AE）"></a>自编码器（AE）</h1><p>如今，数据可视化的数据降噪和降维被认为是自编码器的两个主要的实际应用。使用适当的维度和稀疏性约束，自编码器可以得到比PCA或其他类似技术更好的数据投影。</p><p>自编码器通过数据示例自动学习。这意味着很容易训练在特定类型的输入中表现良好的算法的特定实例，并且不需要任何新的结构，只需适当的训练数据即可。</p><p>但是，自编码器在图像压缩方面做得并不好。由于自编码器是在给定的一组数据上进行训练的，因此它将得到与所用训练集数据相似的压缩结果，但对通用的图像压缩器来说效果并不好。至少不如像JPEG这样的压缩技术。</p><p>自编码器被训练成，可以在输入通过编码器和解码器后保留尽可能多的信息，但也会被训练成，使新的表示具有各种不错的属性。不同类型的自编码器旨在实现不同类型的属性。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>自动编码器是一种只有三层的神经网络：输入层、隐藏层(编码层)和解码层。该网络的目的是重构其输入，使其隐藏层学习到输入的良好特征表示。</p><blockquote><p>自动编码器神经网络是一种无监督机器学习算法，其应用了反向传播，可将目标值设置成与输入值相等。自动编码器的训练目标是将输入复制到输出。在内部，它有一个描述用于表征其输入的代码的隐藏层。</p></blockquote><p><img src="/2019/07/06/自编码器-AE-和变分编码器-VAE/AE1.png" alt="自编码器网络结构"></p><p>自编码器的目标：学习函数 $h(x)\approx x$，其中x是输入，h(x)是自编码器经过编码和解码后的输出。也就是说，自编码器需要学习一个近似恒等函数，使得输出近似等于输入。</p><p>因为中间隐藏层的维度比输入输出层的维度小很多，在神经网络推断过程中如果把隐藏层的参数拿出来，通过神经网络前向传播就产生输出值x,相当于从低维到高维的解压缩过程，而输入层到隐藏层的高维到低维的过程可看作压缩过程。当然我们讨论的是理想情况，神经网络基本不可能实现x=f(x)，在压缩后再解压的过程会产生损失，可类比于有损压缩。</p><p><img src="/2019/07/06/自编码器-AE-和变分编码器-VAE/AE2.png" alt="工作流程示意"></p><p><strong>自编码器的特点：</strong></p><ol><li>一种类PCA的无监督算法</li><li>最小化目标函数和PCA的一致</li><li>一种简单神经网络</li><li>训练目标，网络输入近似等于网络输出</li></ol><p><strong>注意：</strong></p><p>自编码器从某种程度上和PCA很相似，但自编码器比PCA灵活很多。由于自编码器是一种<strong>简单神经网络</strong>，决定了它既能表征<strong>线性变换</strong>也能表征<strong>非线性变换</strong>；而PCA只能通过线性变换实现降维。<strong>自编码器可将其作为层构建深度学习网络。</strong></p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>自编码器主要有以下<strong>四类</strong>：</p><ol><li><strong>去噪自编码器</strong> 最基本的一种自编码器，通过随机地部分采用受损的输入来解决恒等函数风险，使得自动编码器必须进行恢复或去噪，该技术可用于得到输入的良好表征。良好的表征是指可以从受损的输入稳健地获得的表征，该表征可被用于恢复其对应的无噪声输入。去噪自动编码器背后的思想很简单，为了迫使隐藏层发现更加稳健的特征并且为了防止其只是学习其中的恒等关系，我们在训练自动编码器时会让其从受损的版本中重建输入。应用在输入上的噪声量以百分比的形式呈现。一般来说，30% 就很好，但如果你的数据非常少，可能就需要考虑增加更多噪声。</li><li><strong>稀疏自编码器</strong> 通过在训练期间对隐藏单元施加稀疏性（同时保持隐藏单元的数量比输入更多），自动编码器可以在输入数据中学习有用的结构。 这种对输入的稀疏表示在分类任务的预训练中很有用。一般可以通过训练期间在损失函数中添加附加项来实现稀疏性或通过手动将除了几个最重要的隐藏单元全部调零（k稀疏自动编码器，<em>k-sparse autoencoder</em>）。</li><li><strong>变分自编码器</strong> 变分自编码器模型继承了自编码器体系结构，但对潜变量的分布做出了强有力的假设。他们使用变分方法进行潜在表示学习，但这会导致额外的损失和并需要特定的训练算法——称为随机梯度变分贝叶斯（SGVB）。</li><li><strong>收缩/压缩自编码器</strong> 收缩自动编码器在它们的目标函数中增加了一个正则项，迫使模型学习一个对输入值的细微变化具有鲁棒性的函数。</li></ol><h1 id="信息熵和KL散度"><a href="#信息熵和KL散度" class="headerlink" title="信息熵和KL散度"></a>信息熵和KL散度</h1><p>这部分内容见本人的博文<a href>理解KL散度（相对熵）</a></p><h1 id="变分自编码器（VAE）"><a href="#变分自编码器（VAE）" class="headerlink" title="变分自编码器（VAE）"></a>变分自编码器（VAE）</h1><p>变分自编码器由Diederik P Kingma和Danilo Jimenez Rezende在2013年提出，因为其坚实的理论基础、应用的多样性和比MCMC更优异的性能让它生成模型中得到广泛的研究和改进，现在已经成为生成模型算法中的一大主力。如下图的MNIST的手写体数据库图片的生成和名人图片就是使用VAE生成的。变分自编码器理论涉及不少统计学习的内容而目前的实现方法大多是基于深度神经网络。本文以图像识别为例讲解VAE，实际上VAE在文本、语音、视频等领域都可以应用，具体实现采用人工神经网络，实际上VAE也可以用其它的优化技术实现，它是一种很普适的生成模型算法。</p><p><img src="/2019/07/06/自编码器-AE-和变分编码器-VAE/mnist.gif" alt></p><p><img src="/2019/07/06/自编码器-AE-和变分编码器-VAE/face.gif" alt></p><h2 id="vae的神经网络部分"><a href="#vae的神经网络部分" class="headerlink" title="vae的神经网络部分"></a>vae的神经网络部分</h2><h2 id="vae的概率模型部分"><a href="#vae的概率模型部分" class="headerlink" title="vae的概率模型部分"></a>vae的概率模型部分</h2><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jiqizhixin.com/graph/technologies/07645339-ced5-4871-bb96-98062cf4a547" rel="external nofollow noopener noreferrer" target="_blank">自动编码器</a></p><p><a href="https://www.jiqizhixin.com/articles/2017-09-23-4" rel="external nofollow noopener noreferrer" target="_blank">深度学习：自动编码器基础和类型</a></p><p><a href="https://blog.keras.io/building-autoencoders-in-keras.html" rel="external nofollow noopener noreferrer" target="_blank">Building Autoencoders in Keras</a></p><p><a href="https://blog.csdn.net/leviopku/article/details/81449620" rel="external nofollow noopener noreferrer" target="_blank">【AI数学】变分自编码器(VAE)</a></p><p><a href="https://www.cs.cmu.edu/~bhiksha/courses/deeplearning/Fall.2015/slides/lec12.vae.pdf" rel="external nofollow noopener noreferrer" target="_blank">CMU lec12.vae.pdf</a></p><p><a href="https://zhuanlan.zhihu.com/p/33194849" rel="external nofollow noopener noreferrer" target="_blank">理解变分自编码器(VAE)</a></p><p><a href="https://www.jianshu.com/p/43318a3dc715" rel="external nofollow noopener noreferrer" target="_blank">如何理解K-L散度</a></p><blockquote class="blockquote-center"><p><em>Some say the world will end in fire,</em></p><p><em>Some say in ice.</em></p><p><em>From what I’ve tasted of desire</em></p><p><em>I hold with those who favor fire.</em></p><p><em>But if it had to perish twice,</em></p><p><em>I think I know enough of hate</em></p><p><em>To say that for destruction ice</em></p><p><em>Is also great</em></p><p><em>And would suffice.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文对自编码器和变分自编码器做了总结
    
    </summary>
    
      <category term="ML" scheme="https://zejinwang.com/categories/ML/"/>
    
    
      <category term="ML" scheme="https://zejinwang.com/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>pytorch常用函数</title>
    <link href="https://zejinwang.com/2019/07/02/pytorch%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://zejinwang.com/2019/07/02/pytorch常用函数/</id>
    <published>2019-07-02T06:02:16.000Z</published>
    <updated>2019-07-05T14:34:53.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="squeeze和unsqueeze"><a href="#squeeze和unsqueeze" class="headerlink" title="squeeze和unsqueeze"></a>squeeze和unsqueeze</h1><p><code>squeeze()</code>主要用于删除tensor张量中维数为1的指定维度，而<code>unsqueeze</code>用于在指定维度上插入一个新的维数为1的维度。</p><p><img src="/2019/07/02/pytorch常用函数/squeeze.png" alt></p><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = torch.zeros(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.size()</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y1 = torch.squeeze(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y1.size()</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y1 = torch.squeeze(x, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y1.size()</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y1 = torch.squeeze(x, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y1.size()</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><img src="/2019/07/02/pytorch常用函数/unsqueeze.png" alt></p><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.unsqueeze(x, <span class="number">0</span>)</span><br><span class="line">tensor([[ <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.unsqueeze(x, <span class="number">1</span>)</span><br><span class="line">tensor([[ <span class="number">1</span>],</span><br><span class="line">        [ <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><h1 id="MaxPool的ceil-mode参数"><a href="#MaxPool的ceil-mode参数" class="headerlink" title="MaxPool的ceil_mode参数"></a>MaxPool的ceil_mode参数</h1><p>在介绍<code>MaxPool的ceil_mode</code>参数前，首先介绍下<code>MaxPool2d</code>的相关配置：</p><h2 id="MaxPool2d"><a href="#MaxPool2d" class="headerlink" title="MaxPool2d"></a>MaxPool2d</h2><p><img src="/2019/07/02/pytorch常用函数/maxpool1.png" alt></p><p><img src="/2019/07/02/pytorch常用函数/maxpool2.png" alt></p><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># pool of square window of size=3, stride=2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = nn.MaxPool2d(<span class="number">3</span>, stride=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># pool of non-square window</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = nn.MaxPool2d((<span class="number">3</span>, <span class="number">2</span>), stride=(<span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>input = torch.randn(<span class="number">20</span>, <span class="number">16</span>, <span class="number">50</span>, <span class="number">32</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output = m(input)</span><br></pre></td></tr></table></figure><h2 id="ceil-mode"><a href="#ceil-mode" class="headerlink" title="ceil_mode"></a>ceil_mode</h2><p>上面官网给出<code>ceil_mode</code>相关介绍：</p><ul><li><strong>ceil_mode</strong> – when True, will use ceil instead of floor to compute the output shape</li></ul><p>将其置为True，则对输出进行向上取整；默认False情况下，对输出进行向下取整。</p><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.maxp = nn.MaxPool2d(kernel_size=<span class="number">2</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.maxp(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">square_size = <span class="number">6</span></span><br><span class="line">inputs = torch.randn(<span class="number">1</span>, <span class="number">1</span>, square_size, square_size)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(square_size):</span><br><span class="line">    inputs[<span class="number">0</span>][<span class="number">0</span>][i] = i * torch.ones(square_size)</span><br><span class="line">inputs = Variable(inputs)</span><br><span class="line">print(inputs)</span><br><span class="line"> </span><br><span class="line">net = Net()</span><br><span class="line">outputs = net(inputs)</span><br><span class="line">print(outputs.size())</span><br><span class="line">print(outputs)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Variable containing: </span><br><span class="line"></span><br><span class="line">(<span class="number">0</span> ,<span class="number">0</span> ,.,.) = </span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">[torch.FloatTensor of size <span class="number">1</span>x1x6x6] </span><br><span class="line"></span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">Variable containing: </span><br><span class="line"></span><br><span class="line">(<span class="number">0</span> ,<span class="number">0</span> ,.,.) = </span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> </span><br><span class="line"></span><br><span class="line">[torch.FloatTensor of size <span class="number">1</span>x1x3x3]</span><br></pre></td></tr></table></figure><p>在上面的代码中，无论ceil_mode是True or False，结果都是一样<br>但是如果设置<strong>square_size=5</strong>，那么</p><p>当<code>ceil_mode=True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Variable containing: </span><br><span class="line"></span><br><span class="line">(<span class="number">0</span> ,<span class="number">0</span> ,.,.) = </span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> </span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> </span><br><span class="line"></span><br><span class="line">[torch.FloatTensor of size <span class="number">1</span>x1x5x5] </span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>]) </span><br><span class="line">Variable containing: </span><br><span class="line"></span><br><span class="line">(<span class="number">0</span> ,<span class="number">0</span> ,.,.) = </span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">4</span> </span><br><span class="line"></span><br><span class="line">[torch.FloatTensor of size <span class="number">1</span>x1x3x3]</span><br></pre></td></tr></table></figure><p>当<code>ceil_mode=False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Variable containing: </span><br><span class="line"></span><br><span class="line">(<span class="number">0</span> ,<span class="number">0</span> ,.,.) = </span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> </span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> </span><br><span class="line"></span><br><span class="line">[torch.FloatTensor of size <span class="number">1</span>x1x5x5] </span><br><span class="line"></span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]) </span><br><span class="line"></span><br><span class="line">Variable containing: </span><br><span class="line"></span><br><span class="line">(<span class="number">0</span> ,<span class="number">0</span> ,.,.) = </span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> </span><br><span class="line"></span><br><span class="line">[torch.FloatTensor of size <span class="number">1</span>x1x2x2]</span><br></pre></td></tr></table></figure><p><strong>ceil模式</strong>会把<strong>不足square_size的边给保留下来，单独另算</strong>。而<strong>floor模式</strong>则是直接把<strong>不足square_size的边给舍弃</strong>。</p><h1 id="Conv2d的dilation参数"><a href="#Conv2d的dilation参数" class="headerlink" title="Conv2d的dilation参数"></a>Conv2d的dilation参数</h1><p>首先对<code>Conv2d</code>的各项配置参数进行介绍，然后再详细解释<code>dilation</code>参数</p><h2 id="Conv2d"><a href="#Conv2d" class="headerlink" title="Conv2d"></a>Conv2d</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLASS torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, groups=<span class="number">1</span>, bias=<span class="literal">True</span>, padding_mode=<span class="string">'zeros'</span>)</span><br></pre></td></tr></table></figure><p><img src="/2019/07/02/pytorch常用函数/conv2d.png" alt></p><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="comment"># With square kernels and equal stride</span></span><br><span class="line">&gt;&gt;&gt; m = nn.Conv2d(16, 33, 3, stride=2)</span><br><span class="line">&gt;&gt;&gt; <span class="comment"># non-square kernels and unequal stride and with padding</span></span><br><span class="line">&gt;&gt;&gt; m = nn.Conv2d(16, 33, (3, 5), stride=(2, 1), padding=(4, 2))</span><br><span class="line">&gt;&gt;&gt; <span class="comment"># non-square kernels and unequal stride and with padding and dilation</span></span><br><span class="line">&gt;&gt;&gt; m = nn.Conv2d(16, 33, (3, 5), stride=(2, 1), padding=(4, 2), dilation=(3, 1))</span><br><span class="line">&gt;&gt;&gt; input = torch.randn(20, 16, 50, 100)</span><br><span class="line">&gt;&gt;&gt; output = m(input)</span><br></pre></td></tr></table></figure><h2 id="dilation"><a href="#dilation" class="headerlink" title="dilation"></a>dilation</h2><p><code>dilation</code>参数意味着对卷积核进行膨胀，膨胀的部分用<strong>0</strong>进行填充，用术语讲称之为空洞卷积。</p><p>空洞卷积在<strong>增加卷积核感受野</strong>的同时，<strong>参数并未增加</strong>，有效<strong>减少计算量</strong>。</p><p><strong>计算公式：</strong></p><script type="math/tex;mode=display">kernel{\_}dilation = dilation\times(kernel-1)+1</script><p>在 $kernel=3,dilation=2$ 情况下，卷积核膨胀的效果图如下：</p><p><img src="/2019/07/02/pytorch常用函数/dilation.png" alt="img"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://pytorch.org/docs/stable/torch.html" rel="external nofollow noopener noreferrer" target="_blank">PyTorch</a></p><p><a href="https://blog.csdn.net/qq_36556893/article/details/90441484" rel="external nofollow noopener noreferrer" target="_blank">Pytorch中 maxpool的ceil_mode</a></p><p><a href="https://blog.csdn.net/jiongnima/article/details/69487519" rel="external nofollow noopener noreferrer" target="_blank">caffe卷积层延伸：卷积核膨胀详细解析</a></p><blockquote class="blockquote-center"><p><em>Some say the world will end in fire,</em></p><p><em>Some say in ice.</em></p><p><em>From what I’ve tasted of desire</em></p><p><em>I hold with those who favor fire.</em></p><p><em>But if it had to perish twice,</em></p><p><em>I think I know enough of hate</em></p><p><em>To say that for destruction ice</em></p><p><em>Is also great</em></p><p><em>And would suffice.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文旨在记录Pytorch常用函数用法
    
    </summary>
    
      <category term="pytorch" scheme="https://zejinwang.com/categories/pytorch/"/>
    
    
      <category term="pytorch" scheme="https://zejinwang.com/tags/pytorch/"/>
    
      <category term="torch" scheme="https://zejinwang.com/tags/torch/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="https://zejinwang.com/2019/06/27/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://zejinwang.com/2019/06/27/linux常用命令/</id>
    <published>2019-06-27T08:19:41.000Z</published>
    <updated>2019-07-05T14:37:55.082Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="查询相关"><a href="#查询相关" class="headerlink" title="查询相关"></a>查询相关</h1><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><strong>按规则查找某个文件或文件夹，包括子目录</strong></p><ul><li><code>find . -name &#39;*.sh&#39;</code> — 以.sh结尾的文件</li><li><code>find . -name &#39;*channel*&#39;</code> — 包含channel字符的文件</li><li><code>find . -name &#39;build*&#39;</code> — 以build开头的文件</li><li><code>find . -name &#39;abc??&#39;</code> — abc后面有两个字符的文件</li></ul><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p><strong>查找内容包含指定的范本样式的文件，Global Regular Expression Print</strong></p><ul><li><code>grep -n pattern files</code> — 规则 -n表示显示行号</li><li><code>grep -n &#39;PostsActivity&#39; AndroidManifest.xml</code></li><li><code>grep -n &#39;\d&#39; AndroidManifest.xml</code></li><li><code>grep &#39;aapt&#39; build-channel.xml</code> — 文件中包含字符串的所有地方</li><li><code>grep -n &#39;aapt&#39; build-channel.xml</code> — 文件中包含字符串的所有地方，并显示行号</li><li><code>ps -e | grep java</code> — 所有java进程</li><li><code>ps -e | grep -i qq</code> —所有qq进程，不区分大小写</li><li><code>find . -name &#39;*channel.xml&#39; | xargs grep -n &#39;aapt&#39;</code> — 在以channel.xml结尾的文件中查找包含‘aapt’关键字的地方</li><li><code>ls | grep &#39;channel&#39;</code> — 包含channel关键字的文件</li></ul><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p><strong>在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果</strong></p><ul><li><code>which zip</code></li><li><code>which grep</code></li></ul><h1 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h1><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p><strong>tail [-f] [-c Number | -n Number | -m Number | -b Number | -k Number] [File]</strong></p><p><strong>从指定点开始将文件写到标准输出。使用tail命令的-f选项可以方便的查阅正在改变的日志文件，tail -f filename会把filename里最尾部的内容显示在屏幕上，并且不断刷新，使你看到最新的文件内容。</strong></p><ul><li><code>tail -f test.log</code>，循环查看文件内容，Ctrl＋c来终止</li><li><code>tail -n 5 test.log</code>，显示文件最后5行内容</li><li><code>tail -n +5 test.log</code>，从第5行开始显示文件</li></ul><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p><strong>more [-dlfpcsu] [-num] [+/ pattern] [+linenum] [file…]</strong></p><p><strong>more命令和cat的功能一样都是查看文件里的内容，但有所不同的是more可以按页来查看文件的内容，还支持直接跳转行等功能。</strong></p><ul><li><code>more +3 test.log</code>，显示文件中从第3行起的内容</li><li><code>more -5 test.log</code>，设定每屏显示行数</li><li><code>ls -l | more -5</code>，每页显示5个文件信息</li><li><code>more +/day3 test.log</code>，查找第一个出现”day3”字符串的行，并从该处前两行开始显示输出</li></ul><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p><strong>less [options] [file…]</strong></p><p><strong>与more命令一样，less命令也用来分屏显示文件的内容。但是二者存在差别：less命令允许用户向前或向后浏览文件，而more命令只能向前浏览。用less命令显示文件时，用PageUp键向上翻页，用PageDown键向下翻页。要退出less程序，应按Q键。</strong></p><ul><li><code>less test.log</code>，查看文件</li><li><code>ps -ef | less</code>，查看进程信息并通过less分页显示</li><li><code>history | less</code>，查看命令历史使用记录并通过less分页显示</li><li><code>less test1.log test2.log</code>，浏览多个文件，n和p切换文件</li></ul><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p><strong>watch [options] command</strong></p><p><strong>每隔一段时间重复运行一个命令，默认间隔时间是2秒。要运行的命令直接传给shell（注意引用和转义特殊字符）。结果会展示为全屏模式，这样你可以很方便的观察改变</strong></p><ul><li><code>watch -n 60 date</code>，执行date命令每分钟一次，输入^C 退出</li><li><code>watch -d ls -l</code>，查看目录变化</li><li><code>watch -d ’ls -l | fgrep joe’</code>，想找joe用户的文件</li><li><code>watch -d &#39;ls -l|grep scf&#39;</code>，监测当前目录中 scf’ 的文件的变化</li><li><code>watch -n 10 &#39;cat /proc/loadavg&#39;</code>，10秒一次输出系统的平均负载</li><li><code>watch -n 1 -d netstat -ant</code>，每隔一秒高亮显示网络链接数的变化</li><li><code>watch -n 1 -d &#39;pstree | grep http&#39;</code>，每隔一秒高亮显示http链接数的变化</li></ul><h1 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h1><h2 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h2><p><strong>vi file</strong></p><ul><li><p>按i键，进入编辑模式</p></li><li><p>按esc键，进入命令模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:w   保存文件但不退出vi </span><br><span class="line">:w file 将修改另外保存到file中，不退出vi</span><br><span class="line">:w!   强制保存，不推出vi</span><br><span class="line">:wq  保存文件并退出vi</span><br><span class="line">:wq! 强制保存文件，并退出vi</span><br><span class="line">q:  不保存文件，退出vi</span><br><span class="line">:q! 不保存文件，强制退出vi</span><br><span class="line">:e! 放弃所有修改，从上次保存文件开始再编辑</span><br></pre></td></tr></table></figure></li></ul><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p><strong>change mode，变更文件或目录的读、写、运行权限</strong></p><p><strong>chmod [-cfvR] [—help] [—version] mode file…</strong></p><ul><li><code>mode:权限设定字串</code>，格式如下 : [ugoa…][[+-=][rwxX]…][,…]</li><li><code>u</code> 表示该档案的拥有者，<code>g</code> 表示与该档案的拥有者属于同一个群体(group)者，<code>o</code> 表示其他以外的人，<code>a</code> 表示这三者皆是</li><li><code>+</code> 表示增加权限、<code>-</code> 表示取消权限、<code>=</code> 表示唯一设定权限。</li><li><code>r</code> 表示可读取，<code>w</code> 表示可写入，<code>x</code> 表示可执行，<code>X</code> 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。</li><li><code>chmod也可以用数字来表示权限</code>，语法为：chmod abc file，如chmod 777 file</li><li><code>其中a,b,c各为一个数字</code>，分别表示User、Group、及Other的权限。 r=4，w=2，x=1</li><li><code>chmod 777 file</code>，等同于 chmod a=rwx file</li><li><code>chmod ug=rwx,o=x file</code>，等同于 chmod 771 file</li><li><code>chmod 4755 filename</code>，可使此程序具有root的权限</li><li><code>ls -l</code> 可以查看列出当前用户的文件权限</li></ul><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p><strong>zip -r filename.zip filesdir</strong></p><ul><li><code>zip -r test.zip ./*</code>，把当前所有文件压缩到test.zip</li><li><code>zip -r test.zip test</code>，把test文件所有文件及目录，要是到test.zip</li><li><code>zip -d test.zip test.txt</code>，删除压缩文件中test.txt文件</li><li><code>zip -m test.zip ./test.txt</code>，向压缩文件中test.zip中添加test.txt文件</li><li><code>zip -r test.zip file1 file2 file3 filesdir</code>，处理多个文件和目录，空格隔开</li></ul><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><ul><li><code>unzip zip-file</code>，解压到当前目录</li><li><code>unzip -d dst-dir zip-file</code>，解压到指定的目录，-d后为指定目录</li><li><code>unzip -n zip-file</code>，不覆盖已经存在的文件，-n为不要覆盖原有的文件</li><li><code>unzip -n -d dst-dir zip-file</code>，解压到指定的目录，不覆盖已经原有的文件</li><li><code>unzip -o -d dst-dir zip-file</code>，-o不必先询问用户覆盖原有文件</li><li><code>unzip -l zip-file</code>，仅查看压缩文件内所包含的文件</li></ul><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><ul><li><code>tar cvf test.tar test</code>，把test下所有文件和目录做<code>备份</code></li><li><code>tar czvf test.tar.gz test</code>，把test下所有文件和目录做<code>备份</code>并进行<code>压缩</code></li><li><code>tar xzvf test.tar.gz</code>，把这个备份文件<code>还原</code>并<code>解压缩</code></li><li><code>tar tvf test.tar | more</code>，<code>查看</code>备份文件的内容，并以分屏方式显示在显示器上</li><li><code>tar czvf test.tar.gz test --exclude=test/svn</code>，<code>备份压缩</code>并<code>排除</code>目录</li></ul><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><h1 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h1><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p><strong>显示瞬间行程(process)的动态，ps [options] [—help]</strong></p><ul><li><code>ps -A</code>，列出所有的进程</li><li><code>ps -w</code>，显示加宽可以显示较多的资讯</li><li><code>ps -au</code>，显示较详细的资讯</li><li><code>ps -aux</code>，显示所有（包含其他用户）的进程</li><li><a href="http://www.cnblogs.com/wangkangluo1/archive/2011/09/23/2185938.html" rel="external nofollow noopener noreferrer" target="_blank">ps命令详解</a></li><li><a href="http://www.cnblogs.com/allen8807/archive/2010/11/10/1873843.html" rel="external nofollow noopener noreferrer" target="_blank">ps命令介绍</a></li></ul><p><strong>linux上进程有5种状态:</strong></p><ol><li>运行(正在运行或在运行队列中等待)</li><li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li><li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li><li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li><li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</li></ol><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p><strong>动态观察程序的变化，top [-d] | top [-bnp]</strong></p><ul><li><code>top -d 2</code>，每两秒钟更新一次</li><li><code>top -b -n 2 &gt; /tmp/top.txt</code>，将top的信息进行2次，然后将结果输出到/tmp/top.txt</li><li><code>top -d 2 -pid 10604</code>，仅观察PID＝10604的程序</li><li><a href="http://www.cnblogs.com/allen8807/archive/2010/11/10/1874001.html" rel="external nofollow noopener noreferrer" target="_blank">top命令介绍</a></li></ul><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p><strong>free [options]</strong></p><p><strong>free命令可以显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer。在Linux系统监控的工具中，free命令是最经常使用的命令之一</strong></p><ul><li><code>free -m</code>，以MB为单位显示内存使用情况</li><li><code>free -g</code>，以GB为单位显示内存使用情况</li><li><code>free -s 10</code>，周期性的查询内存使用信息</li></ul><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p><strong>kill [-s signal_name] pid…</strong></p><p><strong>发送指定的信号到相应进程，The kill utility sends a signal to the processes specified by the pid operand(s)</strong></p><ul><li><code>kill -l</code>，列出所有信号名称</li><li><code>kill -l SIGKILL</code>，得到指定信号的数值，SIGKILL＝9</li><li><code>kill -9 pid</code>，强行中止进程，强大和危险的命令迫使进程在运行时突然终止，进程在结束后不能自我清理。危害是导致系统资源无法正常释放，一般不推荐使用，除非其他办法都无效。</li><li><code>kill -HUP PID</code>，停止和重启进程，该命令让Linux和缓的执行进程关闭，然后立即重启。在配置应用程序的时候，这个命令很方便，在对配置文件修改后需要重启进程时就可以执行此命令。</li><li><code>kill -l PID</code>，以优雅的方式结束进程，-l选项告诉kill命令用好像启动进程的用户已注销的方式结束进程。当使用该选项时，kill命令也试图杀死所留下的子进程。但这个命令也不是总能成功—或许仍然需要先手工杀死子进程，然后再杀死父进程。</li><li><code>ps -ef | grep vim</code>，查找进程</li></ul><h1 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><strong>ping [参数] [主机名或IP地址]</strong></p><p><strong>确定网络和各外部主机的状态；跟踪和隔离硬件和软件问题；测试、评估和管理网络。</strong></p><ul><li><code>ping -b 192.168.1.1</code>，ping网关</li><li><code>ping -c 10 192.168.1.2</code>，ping指定次数</li><li><code>ping -c 10 -i 0.5 192.168.1.2</code>，时间间隔和次数限制的ping</li><li><code>ping -c 5 www.baidu.com</code>，通过域名ping公网上的站点</li></ul><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p><strong>netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][—ip]</strong></p><p><strong>用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</strong></p><ul><li><code>netstat -a</code>，列出所有端口</li><li><code>netstat -nu</code>，显示当前UDP连接状况</li><li><code>netstat -apu</code>，显示UDP端口号的使用情况</li><li><code>netstat -i</code>，显示网卡列表</li><li><code>netstat -g</code>，显示组播组的关系</li><li><code>netstat -s</code>，显示网络统计信息</li><li><code>netstat -l</code>，显示监听的套接口</li><li><code>netstat -n</code>，显示所有已建立的有效连接</li><li><code>netstat -e</code>，显示关于以太网的统计数据</li><li><code>netstat -r</code>，显示关于路由表的信息</li><li><code>netstat -at</code>，列出所有 tcp 端口</li><li><code>netstat -ap | grep ssh</code>，找出程序运行的端口</li><li><code>netstat -pt</code>，在 netstat 输出中显示 PID 和进程名称</li><li><code>netstat -anpt | grep &#39;:16064&#39;</code>，找出运行在指定端口的进程</li></ul><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p><strong>telnet[参数][主机]</strong></p><p><strong>执行telnet指令开启终端机阶段作业，并登入远端主机。</strong></p><ul><li><code>telnet 192.168.120.206</code></li><li><code>service xinetd restart</code>，启动telnet服务</li></ul><h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><p><strong>ifconfig [网络设备] [参数]</strong></p><p><strong>ifconfig 命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置。</strong></p><ul><li><code>ifconfig -a</code> 显示全部接口信息</li><li><code>ifconfig -s</code> 显示摘要信息（类似于 netstat -i）</li></ul><h1 id="工具命令"><a href="#工具命令" class="headerlink" title="工具命令"></a>工具命令</h1><h2 id="svn"><a href="#svn" class="headerlink" title="svn"></a>svn</h2><ul><li><code>svn co path --username name --password password</code></li><li><code>svn co -path -dirname</code></li><li><code>svn add file</code></li><li><code>svn update -r m path</code></li><li><code>svn update -r 200 test.php</code>，更新到某个版本</li></ul><h2 id="cvs"><a href="#cvs" class="headerlink" title="cvs"></a>cvs</h2><ul><li><code>cvs history -ca | grep username | grep 01-01</code></li><li><code>cvs history -ca | grep username | grep kp | grep 2012-10-&#39;[1 2][0-9]&#39;</code></li></ul><h2 id="ant"><a href="#ant" class="headerlink" title="ant"></a>ant</h2><p><strong>Ant -arguments [target1,target2,target3,target4……]</strong></p><p><strong>Ant构建文件能够将项目编译，打包，测试。若没有指定任何参数， Ant会在当前目录下检索build.xml文件，如果找到了就运行该文件，如果没有找到了会，会提示没有找到相关的build.xml文件。</strong></p><ul><li><code>ant -h</code>，表示提供ant命令参数任务</li><li><code>ant -projecthelp | -p</code>，显示当前build.xml的主要任务，例如显示clean、release</li><li><code>ant -version</code>，显示当前ant版本</li><li><code>ant -diagnostics</code>，诊断当前ant的所有的配置</li><li><code>ant -debug | -d</code>，检索当前构建文件配置情况</li><li><code>ant -quiet | -q</code>，显示当前构建文件无依赖任务</li><li><code>ant -emacs | -e</code>，调用编辑当前构建文件编辑器</li><li><code>ant -lib [path]</code>，调用当前项目中jar，class文件</li><li><code>ant -logfile |-l</code>，调用运行当前项目中*.log文件</li><li><code>ant -buildfile |- f | -file</code>，调用运行类似build.xml的文件</li><li><code>ant -propertyfile [name]</code>，调用运行指定的属性文件</li><li><code>ant -find | -s file</code>，检索运行指定的构建文件</li><li><code>ant -autoproxy</code>，使用系统自动代理构建文件</li><li><code>ant-main class</code>，设置系统类库文件中主要类</li><li><code>ant -nice number</code>，设置主类线程允许的线程数</li></ul><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><ul><li><code>mvn archetype:create</code>，创建 Maven 项目</li><li><code>mvn compile</code>，编译源代码</li><li><code>mvn test-compile</code>，编译测试代码</li><li><code>mvn test</code>，运行应用程序中的单元测试</li><li><code>mvn site</code>，生成项目相关信息的网站</li><li><code>mvn clean</code>，清除目标目录中的生成结果</li><li><code>mvn package</code>，依据项目生成 jar 文件</li><li><code>mvn install</code>，在本地 Repository 中安装 jar</li><li><code>mvn eclipse:eclipse</code>，生成 Eclipse 项目文件</li><li><code>mvn -Dmaven.test.skip=true</code>，忽略测试文档编译</li></ul><h2 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h2><ul><li><code>adb kill-server</code></li><li><code>adb start-server</code></li><li><code>adb devices</code></li><li><code>adb uninstall file</code></li><li><code>adb uninstall -k file</code>，-k 参数,为卸载软件但是保留配置和缓存文件</li><li><code>adb push &lt;本地路径&gt; &lt;远程路径&gt;</code>，可以把本机电脑上的文件或者文件夹复制到设备(手机)</li><li><code>adb pull &lt;远程路径&gt; &lt;本地路径&gt;</code>，可以把设备(手机)上的文件或者文件夹复制到本机电脑</li><li><code>adb reboot</code>，重启adb</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.cnblogs.com/purediy/p/4288649.html" rel="external nofollow noopener noreferrer" target="_blank">那些年整理的Linux常用命令，简单明了</a></p><blockquote class="blockquote-center"><p><em>Some say the world will end in fire,</em></p><p><em>Some say in ice.</em></p><p><em>From what I’ve tasted of desire</em></p><p><em>I hold with those who favor fire.</em></p><p><em>But if it had to perish twice,</em></p><p><em>I think I know enough of hate</em></p><p><em>To say that for destruction ice</em></p><p><em>Is also great</em></p><p><em>And would suffice.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文记录常用的Linux命令
    
    </summary>
    
      <category term="linux" scheme="https://zejinwang.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://zejinwang.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vim常用命令</title>
    <link href="https://zejinwang.com/2019/06/27/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://zejinwang.com/2019/06/27/vim常用命令/</id>
    <published>2019-06-27T01:37:04.000Z</published>
    <updated>2019-07-05T14:38:06.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用前需要知道的"><a href="#使用前需要知道的" class="headerlink" title="使用前需要知道的"></a>使用前需要知道的</h1><p><strong>vim 是对vi的扩展，文中的很多操作是vi通用的</strong></p><p>vi是<strong>区分大小写</strong>的命令的，也就是说 <code>g</code>与<code>G</code> 是不同的命令</p><p>在不同模式下，快捷键是不一样的 模式分 <code>一般模式</code> <code>编辑模式</code> <code>指令模式</code></p><p>一般模式用于文件内部操作，编辑模式用于输入编写等，指令模式用于对文本文件进行操作</p><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><blockquote><p>进入一般模式为开始编辑，或者按esc后进入</p></blockquote><div class="table-container"><table><thead><tr><th>按键</th><th>效果</th></tr></thead><tbody><tr><td>a,i,r,o,A,I,R,O</td><td>进入编辑模式</td></tr><tr><td>h,backspace</td><td>左移动</td></tr><tr><td>l,space</td><td>右移动</td></tr><tr><td>j</td><td>下移动</td></tr><tr><td>k</td><td>上移动</td></tr><tr><td>0,</td><td>移动到行首</td></tr><tr><td>$</td><td>移动到行末，<code>1$</code>表示当前行的行尾，<code>2$</code>表示当前行的下一行的行尾</td></tr><tr><td>b</td><td>按照单词向前移动 字首</td></tr><tr><td>e</td><td>按照单词向后移动 字尾</td></tr><tr><td>w</td><td>按照单词向后移至次一个字首</td></tr><tr><td>H</td><td>移动到屏幕最上 非空白字</td></tr><tr><td>M</td><td>移动到屏幕中央 非空白字</td></tr><tr><td>L</td><td>移动到屏幕最下 非空白字</td></tr><tr><td>G</td><td>移动到文档最后一行</td></tr><tr><td>gg</td><td>移动到文档第一行</td></tr><tr><td>v</td><td>进入光标模式，配合移动键选中多行</td></tr><tr><td>Ctrl+f</td><td>向下翻页</td></tr><tr><td>Ctrl+b</td><td>向上翻页</td></tr><tr><td>u</td><td>撤销上一次操作</td></tr><tr><td>``</td><td>回到上次编辑的位置</td></tr><tr><td>dw</td><td>删除这个单词后面的内容</td></tr><tr><td>dd</td><td>删除光标当前行</td></tr><tr><td>dG</td><td>删除光标后的全部文字</td></tr><tr><td>d$</td><td>删除本行光标后面的内容</td></tr><tr><td>d0</td><td>删除本行光标前面的内容</td></tr><tr><td>y</td><td>复制当前行，会复制换行符</td></tr><tr><td>yy</td><td>复制当前行的内容</td></tr><tr><td>yyp</td><td>复制当前行到下一行，此复制不会放到剪切板中</td></tr><tr><td>nyy</td><td>复制当前开始的n行</td></tr><tr><td>p,P,.</td><td>粘贴</td></tr><tr><td>ddp</td><td>当前行和下一行互换位置</td></tr><tr><td>J</td><td>合并行</td></tr><tr><td>Ctrl+r</td><td>重复上一次动作</td></tr><tr><td>Ctrl+z</td><td>暂停并退出</td></tr><tr><td>ZZ</td><td>保存离开</td></tr><tr><td>xp</td><td>交换字符后面的交换到前面</td></tr><tr><td>~</td><td>更换当前光标位置的大小写，并光标移动到本行右一个位置，直到无法移动</td></tr></tbody></table></div><h2 id="光标详细操作"><a href="#光标详细操作" class="headerlink" title="光标详细操作"></a>光标详细操作</h2><div class="table-container"><table><thead><tr><th>按键</th><th>效果</th></tr></thead><tbody><tr><td>Ctrl+e</td><td>向下滚动</td></tr><tr><td>Ctrl+b</td><td>向上翻页</td></tr><tr><td>b</td><td>按照单词向前移动 字首</td></tr><tr><td>B</td><td>按照单词向前移动 字首 忽略一些标点符号</td></tr><tr><td>e</td><td>按照单词向后移动 字尾</td></tr><tr><td>E</td><td>按照单词向后移动 忽略一些标点符号</td></tr><tr><td>w</td><td>按照单词向后移至次一个字首</td></tr><tr><td>W</td><td>按照单词向后移至次一个字首 忽略一些标点符号</td></tr><tr><td>H</td><td>移动到屏幕最上 非空白字</td></tr><tr><td>M</td><td>移动到屏幕中央 非空白字</td></tr><tr><td>L</td><td>移动到屏幕最下 非空白字</td></tr><tr><td>G</td><td>移动到文档最后一行</td></tr><tr><td>gg</td><td>移动到文档第一行</td></tr><tr><td>(</td><td>光标到句尾</td></tr><tr><td>)</td><td>光标到局首</td></tr><tr><td>{</td><td>光标到段落开头</td></tr><tr><td>}</td><td>光标到段落结尾</td></tr><tr><td>nG</td><td>光标下移动到n行的首位</td></tr><tr><td>n$</td><td>光标移动到n行尾部</td></tr><tr><td>n+</td><td>光标下移动n行</td></tr><tr><td>n-</td><td>光标上移动n行</td></tr></tbody></table></div><h1 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h1><div class="table-container"><table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td>*</td><td>向下查找同样光标的字符</td></tr><tr><td>#</td><td>向上查找同样光标的字符</td></tr><tr><td>/code</td><td>查找 code 一样的内容，向后</td></tr><tr><td>?code</td><td>查找 code 一样的内容，向前</td></tr><tr><td>n</td><td>查找下一处</td></tr><tr><td>N</td><td>查找上一处</td></tr><tr><td>ma</td><td>在光标处做一个名叫a的标记 可用26个标记 (a~z)</td></tr><tr><td>`a</td><td>移动到一个标记a</td></tr><tr><td>d`a</td><td>删除当前位置到标记a之间的内容</td></tr><tr><td>:marks</td><td>查看所有标记</td></tr></tbody></table></div><h1 id="指令模式"><a href="#指令模式" class="headerlink" title="指令模式"></a>指令模式</h1><div class="table-container"><table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td>:q</td><td>一般退出</td></tr><tr><td>:q!</td><td>退出不保存</td></tr><tr><td>:wq</td><td>保存退出</td></tr><tr><td>:w filename</td><td>另存为 filename</td></tr><tr><td>:jumps</td><td>历史编辑文档记录</td></tr><tr><td>:set nu</td><td>设置行号显示</td></tr><tr><td>:set nonu</td><td>取消行号显示</td></tr><tr><td>:set</td><td>显示设置参数</td></tr><tr><td>:set autoindent</td><td>自动缩排，回车与第一个非空格符对齐</td></tr><tr><td>:syntax on/off</td><td>根据程序语法高亮显示</td></tr><tr><td>:set highlight</td><td>高亮设置查看</td></tr><tr><td>:set hlsearch</td><td>查找代码高亮显示</td></tr><tr><td>:nohlsearch</td><td>暂时关闭高亮显示</td></tr><tr><td>:set nohlsearch</td><td>永久关闭高亮显示</td></tr><tr><td>:set bg=dark</td><td>设置暗色调</td></tr><tr><td>:set bg=light</td><td>设置亮色调</td></tr></tbody></table></div><h1 id="屏幕翻滚"><a href="#屏幕翻滚" class="headerlink" title="屏幕翻滚"></a>屏幕翻滚</h1><div class="table-container"><table><thead><tr><th>按键</th><th>效果</th></tr></thead><tbody><tr><td>Ctrl+f</td><td>向文件尾翻一屏幕</td></tr><tr><td>Ctrl+b</td><td>向文件首翻一屏幕</td></tr><tr><td>Ctrl+d</td><td>向文件尾翻半屏幕</td></tr><tr><td>Ctrl+u</td><td>向文件首翻半屏幕</td></tr></tbody></table></div><h1 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h1><div class="table-container"><table><thead><tr><th>按键</th><th>效果</th></tr></thead><tbody><tr><td>i</td><td>在光标前</td></tr><tr><td>I</td><td>在当前行首</td></tr><tr><td>a</td><td>在光标后</td></tr><tr><td>A</td><td>在当前行尾部</td></tr><tr><td>o</td><td>在当前行下新开一行</td></tr><tr><td>O</td><td>在当前行上新开一行</td></tr><tr><td>r</td><td>替换当前字符</td></tr><tr><td>R</td><td>替换当前行及后面的字符，直到按esc为止</td></tr><tr><td>s</td><td>从当前行开始，以输入的文本替代指定数目的字符</td></tr><tr><td>S</td><td>删除指定数目的行，并以输入的文本替代</td></tr><tr><td>ncw,nCW</td><td>修改指定数目n的字符</td></tr><tr><td>nCC</td><td>修改指定数目n的行</td></tr></tbody></table></div><h1 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h1><div class="table-container"><table><thead><tr><th>按键</th><th>效果</th></tr></thead><tbody><tr><td>ndw,nDW</td><td>删除光标开始及其后 n-1 个字符</td></tr><tr><td>dw</td><td>删除这个单词后面的内容</td></tr><tr><td>dd</td><td>删除光标当前行</td></tr><tr><td>dG</td><td>删除光标后的全部文字</td></tr><tr><td>d$</td><td>删除本行光标后面的内容</td></tr><tr><td>d0</td><td>删除本行光标前面的内容</td></tr><tr><td>ndd</td><td>删除当前行，以及其后的n-1行</td></tr><tr><td>x</td><td>删除一个字符，光标后</td></tr><tr><td>X</td><td>删除一个字符，光标前</td></tr><tr><td>Ctrl+u</td><td>删除输入模式下的输入的文本</td></tr></tbody></table></div><h1 id="多窗口模式"><a href="#多窗口模式" class="headerlink" title="多窗口模式"></a>多窗口模式</h1><div class="table-container"><table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td>:split</td><td>创建新窗口</td></tr><tr><td>Ctrl+w</td><td>切换窗口</td></tr><tr><td>Ctrl-w =</td><td>所有窗口一样高</td></tr><tr><td>Ctrl-w+方向键</td><td>多窗口视图切换</td></tr></tbody></table></div><h1 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h1><div class="table-container"><table><thead><tr><th>指令</th><th>效果</th><th></th></tr></thead><tbody><tr><td>:args</td><td>列出当前编辑的文件名</td><td></td></tr><tr><td>:next</td><td>打开多文件，使用 n(Next) p(revious)</td><td>N(ext) 切换</td></tr><tr><td>:file</td><td>列出当前打开的所有文件</td></tr></tbody></table></div><h1 id="vim-自定义技巧"><a href="#vim-自定义技巧" class="headerlink" title="vim 自定义技巧"></a>vim 自定义技巧</h1><h2 id="复制粘贴取消缩进"><a href="#复制粘贴取消缩进" class="headerlink" title="复制粘贴取消缩进"></a>复制粘贴取消缩进</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> paste</span><br></pre></td></tr></table></figure><p>进入paste模式以后，可以在插入模式下粘贴内容，不会有任何变形<br>这个参数做了这么多事：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">textwidth设置为0</span><br><span class="line">wrapmargin设置为0</span><br><span class="line"><span class="built_in">set</span> noai</span><br><span class="line"><span class="built_in">set</span> nosi</span><br><span class="line">softtabstop设置为0</span><br><span class="line">revins重置</span><br><span class="line">ruler重置</span><br><span class="line">showmatch重置</span><br><span class="line">formatoptions使用空值</span><br></pre></td></tr></table></figure><p>下面的选项值不变，但却被禁用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lisp</span><br><span class="line">indentexpr</span><br><span class="line">cindent</span><br></pre></td></tr></table></figure><p>绑定快捷键来激活/取消 paste模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> pastetoggle=&lt;F11&gt;</span><br></pre></td></tr></table></figure><p>出现粘贴换行符错位，设置一下 <code>.vimrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" this can change way of paste words</span></span><br><span class="line"><span class="string">:set paste</span></span><br><span class="line"><span class="string">"</span> default tabstop=8</span><br><span class="line">:<span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="string">" use keyboard F11 to  change paste mode</span></span><br><span class="line"><span class="string">:set pastetoggle=&lt;F11&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vim-缩进"><a href="#vim-缩进" class="headerlink" title="vim 缩进"></a>vim 缩进</h3><p>Normal Mode下，命令<code>&gt;&gt;</code>将对当前行增加缩进，而命令<code>&lt;&lt;</code>则将对当前行减少缩进<br>在命令前使用数字，来指定命令作用的范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5&lt;&lt;</span><br></pre></td></tr></table></figure><p>在Insert/Replace Mode下</p><p><code>Ctrl-Shift-t</code>可以增加当前行的缩进<br><code>Ctrl-Shift-d</code>则可以减少当前行的缩进<br>使用<code>0-Ctrl-Shift-d</code>命令，将移除所有缩进</p><blockquote><p>需要注意的是，当我们输入命令中的“0”时，Vim会认为我们要在文本中插入一个0，并在屏幕上显示输入的“0”；然后当我们执行命令0-Ctrl-Shift-d时，Vim就会意识到我们要做的是减少缩进，这时0会就会从屏幕上消失</p></blockquote><h3 id="vim-tab缩进"><a href="#vim-tab缩进" class="headerlink" title="vim tab缩进"></a>vim tab缩进</h3><p>tab缩进宽度默认为8个空格</p><p>我们可以使用以下命令，来修改缩进宽度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> tabstop=4</span><br><span class="line">:<span class="built_in">set</span> softtabstop=4</span><br><span class="line">:<span class="built_in">set</span> shiftwidth=4</span><br><span class="line">:<span class="built_in">set</span> expandtab</span><br></pre></td></tr></table></figure><ul><li>tabstop:表示一个 tab 显示出来是多少个空格的长度默认 8</li><li>softtabstop:表示在编辑模式的时候按退格键的时候退回缩进的长度当使用 expandtab 时特别有用。</li><li>shiftwidth:表示每一级缩进的长度一般设置成跟 softtabstop 一样。 当设置成 expandtab 时缩进用空格来表示noexpandtab 则是用制表符表示一个缩进</li><li>expandtab选项，用来控制是否将Tab转换为空格,但是这个选项并不会改变已经存在的文本，如果需要应用此设置将所有Tab转换为空格，需要执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:retab!</span><br></pre></td></tr></table></figure><h3 id="vim-自动缩进"><a href="#vim-自动缩进" class="headerlink" title="vim 自动缩进"></a>vim 自动缩进</h3><ul><li>cindent</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> cindent</span><br></pre></td></tr></table></figure><p>vim可以很好的识别出C和Java等结构化程序设计语言，并且能用C语言的缩进格式来处理程序的缩进结构</p><ul><li>smartindent</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> smartindent</span><br></pre></td></tr></table></figure><p>在这种缩进模式中，每一行都和前一行有相同的缩进量，同时这种缩进形式能正确的识别出花括号，当遇到右花括号（}），则取消缩进形式。此外还增加了识别C语言关键字的功能。如果一行是以#开头的，那么这种格式将会被特殊对待而不采用缩进格式。</p><ul><li>autoindent</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> autoindent</span><br></pre></td></tr></table></figure><p>在这种缩进形式中，新增加的行和前一行使用相同的缩进形式</p><h3 id="显示隐藏符号"><a href="#显示隐藏符号" class="headerlink" title="显示隐藏符号"></a>显示隐藏符号</h3><ul><li>默认不显示 <code>:set nolist</code></li><li>显示 <code>:set invlist</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" normal is :set nolist | show hide is :set invlist</span></span><br><span class="line"><span class="string">:set nolist</span></span><br></pre></td></tr></table></figure><h3 id="使用vim寄存器"><a href="#使用vim寄存器" class="headerlink" title="使用vim寄存器"></a>使用vim寄存器</h3><p>使用vim寄存器 “+p 粘贴</p><p>根本不用考虑是否自动缩进，是否paste模式，直接原文传递</p><p>如果想保存原寄存器中内容而同时增加新的内容<br>就要在yy前增加标签<br>标签以双引号开始，跟着的是标签名称，可以是数字0-9，也可以是26个字母</p><p>显示所有寄存器内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:reg</span><br></pre></td></tr></table></figure><p>注意两个特殊的寄存器：<code>*</code> 和 <code>+</code></p><p>这两个寄存器是和系统相通的，前者关联系统选择缓冲区，后者关联系统剪切板<br>通过它们可以和其他程序进行数据交换</p><blockquote><p>若寄存器列表里无 <code>*</code> 或 <code>+</code> 寄存器，则可能是由于没有安装vim的图形界面所致<br>sudo apt-get install vim-gnome</p></blockquote><h2 id="设置vim永远显示行号"><a href="#设置vim永远显示行号" class="headerlink" title="设置vim永远显示行号"></a>设置vim永远显示行号</h2><p>修改vim的配置文件加入 set nu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.vimrc</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nu</span><br></pre></td></tr></table></figure><p>当然也可以输入其他配置类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nonu</span><br><span class="line">syntax on</span><br></pre></td></tr></table></figure><h2 id="vimrc-常用配置"><a href="#vimrc-常用配置" class="headerlink" title="vimrc 常用配置"></a>vimrc 常用配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" open syntax</span></span><br><span class="line"><span class="string">syntax on</span></span><br><span class="line"><span class="string">"</span> <span class="built_in">set</span> not show line number can change by :<span class="built_in">set</span> nu</span><br><span class="line">:<span class="built_in">set</span> nonu</span><br><span class="line"><span class="string">" set show line number when in edit</span></span><br><span class="line"><span class="string">:set ruler</span></span><br><span class="line"><span class="string">"</span> <span class="built_in">set</span> tab button stop</span><br><span class="line"><span class="string">" default tabstop=8</span></span><br><span class="line"><span class="string">:set tabstop=4</span></span><br><span class="line"><span class="string">:set softtabstop=4</span></span><br><span class="line"><span class="string">:set shiftwidth=4</span></span><br><span class="line"><span class="string">:set expandtab</span></span><br><span class="line"><span class="string">"</span> use keyboard F11 to change paste mode</span><br><span class="line">:<span class="built_in">set</span> pastetoggle=&lt;F11&gt;</span><br><span class="line"><span class="string">" normal is :set nolist | show hide is :set invlist</span></span><br><span class="line"><span class="string">:set nolist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> fix mac vim keyboard delete can not delete error, so as <span class="built_in">set</span> backspace=indent,eol,start</span><br><span class="line"><span class="built_in">set</span> backspace=2</span><br><span class="line"><span class="string">" ------------</span></span><br><span class="line"><span class="string">"</span> install plug-in manager see https://github.com/VundleVim/Vundle.vim</span><br></pre></td></tr></table></figure><h2 id="查看vim设置的样例文件"><a href="#查看vim设置的样例文件" class="headerlink" title="查看vim设置的样例文件"></a>查看vim设置的样例文件</h2><ul><li>linux 查看</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr/share/ -name <span class="string">"*example.vim"</span></span><br></pre></td></tr></table></figure><ul><li>mac 查看方法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate example.vim</span><br></pre></td></tr></table></figure><blockquote><p>如果是第一次运行会报告错误，需要建立索引，根据提示操作即可，建议运行一次 updatedb</p></blockquote><p>找到标识为 <code>example.vim</code> 的文件就是样例</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/dde77e3b299f" rel="external nofollow noopener noreferrer" target="_blank">vim 常用快捷键及使用技巧</a></p><blockquote class="blockquote-center"><p><em>Some say the world will end in fire,</em></p><p><em>Some say in ice.</em></p><p><em>From what I’ve tasted of desire</em></p><p><em>I hold with those who favor fire.</em></p><p><em>But if it had to perish twice,</em></p><p><em>I think I know enough of hate</em></p><p><em>To say that for destruction ice</em></p><p><em>Is also great</em></p><p><em>And would suffice.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文介绍了常用的vim命令
    
    </summary>
    
      <category term="vim" scheme="https://zejinwang.com/categories/vim/"/>
    
    
      <category term="vim" scheme="https://zejinwang.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>ios端利用VPS搭建的shadowsocks自制vpn </title>
    <link href="https://zejinwang.com/2019/06/25/ios%E7%AB%AF%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%9A%84shadowsocks%E8%87%AA%E5%88%B6vpn/"/>
    <id>https://zejinwang.com/2019/06/25/ios端利用VPS搭建的shadowsocks自制vpn/</id>
    <published>2019-06-25T08:19:43.000Z</published>
    <updated>2019-07-06T02:17:39.821Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h2><ul><li><p><strong>Shadowsocks Server</strong></p></li><li><p><strong>ios 手机</strong></p></li><li><p><strong>安装有PP助手的Windows 操作系统PC</strong></p></li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>下载<strong>shadowrocket.ipa</strong>安装包到<strong>Windows电脑</strong></p><p><a href="https://pan.baidu.com/s/1wF6UlNiZUNLCA8j__FodiQ" rel="external nofollow noopener noreferrer" target="_blank">安装包百度云链接</a> 密码:8aae</p></li><li><p>将<strong>ios手机</strong>用数据线连接到<strong>Windows电脑</strong> <del>MAC OSX不可用</del>；</p></li><li><p>利用<strong>PP助手&gt;我的设备&gt;应用管理&gt;我的应用&gt;安装本地应用&gt;选择引用文件</strong>来选择<strong>已下载的shadowrocket.ipa</strong>文件在ios手机上进行安装；</p><p><img src="/2019/06/25/ios端利用VPS搭建的shadowsocks自制vpn/pp.png" alt="PP助手安装本地文件示意图"></p></li></ol><h2 id="shadowrocket的配置"><a href="#shadowrocket的配置" class="headerlink" title="shadowrocket的配置"></a>shadowrocket的配置</h2><p>在<strong>iOS 手机</strong>上安装成功<strong>shadowrocket</strong>安装成功，接下来便是要根据你在VPS上的<strong>Shadowsocks Server</strong>的配置(<strong>IP、端口号、密码、加密算法</strong>)来在手机上完成相应配置。</p><p>下图是配置完以后，打开<strong>vpn</strong>进行使用的效果图👇</p><p><img src="/2019/06/25/ios端利用VPS搭建的shadowsocks自制vpn/1.png" alt="进入小火箭软件界面"></p><p>那么具体该怎么配置呢，首先点击上图右上角的➕按钮，就能进入下图所示页面，然后在该页面中填好你的服务器上相应的配置信息，最后点击右上角的<strong>完成</strong>按钮，就大功告成啦！！！</p><p><img src="/2019/06/25/ios端利用VPS搭建的shadowsocks自制vpn/2.png" alt="配置介绍图"></p><p>预知详细配置流程的朋友，请移步👉：<a href="http://laob.me/2300/" rel="external nofollow noopener noreferrer" target="_blank">iOS利器“小火箭”（Shadowrocket）最全使用教程</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://laob.me/2300/" rel="external nofollow noopener noreferrer" target="_blank">iOS利器“小火箭”（Shadowrocket）最全使用教程</a></p><p><a href="https://pro.25pp.com/faq_detail/pc5/20005140" rel="external nofollow noopener noreferrer" target="_blank">教你如何安装免费应用或者本地应用</a></p><blockquote class="blockquote-center"><p><em>Some say the world will end in fire,</em></p><p><em>Some say in ice.</em></p><p><em>From what I’ve tasted of desire</em></p><p><em>I hold with those who favor fire.</em></p><p><em>But if it had to perish twice,</em></p><p><em>I think I know enough of hate</em></p><p><em>To say that for destruction ice</em></p><p><em>Is also great</em></p><p><em>And would suffice.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文介绍了如何利用国外服务器搭建的shadowsocks自制手机vpn
    
    </summary>
    
      <category term="ssh" scheme="https://zejinwang.com/categories/ssh/"/>
    
    
      <category term="vpn" scheme="https://zejinwang.com/tags/vpn/"/>
    
      <category term="手机端" scheme="https://zejinwang.com/tags/%E6%89%8B%E6%9C%BA%E7%AB%AF/"/>
    
      <category term="shadowrocket" scheme="https://zejinwang.com/tags/shadowrocket/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 框架下404页面的设置</title>
    <link href="https://zejinwang.com/2019/06/25/Hexo-%E6%A1%86%E6%9E%B6%E4%B8%8B404%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <id>https://zejinwang.com/2019/06/25/Hexo-框架下404页面的设置/</id>
    <published>2019-06-25T04:27:46.000Z</published>
    <updated>2019-06-25T07:32:23.098Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​ 今天心情不错，<strong>Google Search Console</strong> 上一直报错通过不了的站点地图终于获取成功了…别问我为什么，它之前绝对是抽了，好好地把旧版更新到新版，结果各种问题。在<strong>sitemap</strong>这个问题上折腾了有四天多(上周四 — 本周二)，此处po图同庆下。</p><p><img src="/2019/06/25/Hexo-框架下404页面的设置/sitemap.png" alt="站点地图验收成功"></p><p>​ 补充下站点地图的作用，搜索引擎的工作并非如常人所想，只要你发布相应的网页，内容就会被搜索引擎自动收录。而是需要网站向搜索引擎提交自身链接，然后相应的网页信息才会在搜索时按照rank机制进行显示。这里具体说明下<strong>Baidu</strong>常用的站点内容推送方式。</p><blockquote><p>多种推送站点内容的方案：</p><ul><li>主动推送：通过 API 接口推送站点内容，实时性较高</li><li>自动推送：在网页内添加 JS 脚本，每当页面被访问的时候会将页面 url 推送给百度，比较被动</li><li>sitemap：填写站点地图文件地址，百度会周期性的抓取其中的内容进行分析收录，收录效率比较低</li><li>手动提交：手动填写链接地址进行收录</li></ul></blockquote><p>本站在针对百度搜索引擎收录上使用三种推送方案：</p><ul><li><strong>主动推送</strong> 该方式需要借助<a href="https://github.com/huiwang/hexo-baidu-url-submit" rel="external nofollow noopener noreferrer" target="_blank">hexo-baidu-url-submit</a>插件实现快捷推送，在根目录下安装相应依赖</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>并在站点配置文件_confirg.yml上添加下列语句：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">100</span>  <span class="comment"># 提交最新的一个链接</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">yearito.cn</span>  <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">xxxxx</span>  <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidu_urls.txt</span>  <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>然后在站点配置文件中修改部署策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># Deployment</span></span><br><span class="line">  <span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">- deploy:</span></span><br><span class="line"><span class="attr">-   type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">-   repo:</span> <span class="string">git@yearito.cn:~/blog.yearito.git</span></span><br><span class="line"><span class="string">+</span> <span class="attr">deploy:</span></span><br><span class="line"><span class="string">+</span> <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="string">+</span>   <span class="attr">repo:</span> <span class="string">git@yearito.cn:~/blog.yearito.git</span></span><br><span class="line"><span class="string">+</span> <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span> <span class="comment"># 百度</span></span><br></pre></td></tr></table></figure><p>每次部署的时候将会自动推送网站内容到百度。</p><ul><li><p><strong>自动推送</strong> Next 主题配置文件中内置了一键开启百度自动推送的选项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><p>每次访问站点页面都会通过以上脚本推送本页 url 到百度。</p><ul><li><strong>sitemap</strong> 在站长页面提交属于自己网站的sitemap.xml文件，若判断提交成功，则搜索引擎的爬虫会间隔一段时间爬取sitemap中所收录网站页面的内容信息。</li></ul><p>​ 建议不采用主动推送方式进行内容推送，在你未将自己的<strong>GitHub pages</strong>仓库的属性设为<strong>private</strong>之前，这样做风险很大…</p><p>​ 码到这感觉应该单独开个页面，系统讲述下以上内容，包括<strong>网站验证的几种方式</strong>、<strong>sitemap.xml的格式</strong>、<strong>robots.txt的具体配置</strong>等等，本站毕竟新开张，刚刚才被Google收录…陆陆续续我也会出相应的博文的，接下来回归正题。</p><h2 id="常规404页面"><a href="#常规404页面" class="headerlink" title="常规404页面"></a>常规404页面</h2><p>常规404页面，便是你在主题配置_config.yml中把内置的menu下相应注释符号去掉，然后它会显示一个很难以描述的404页面，本质上和创建<strong>tags</strong>、<strong>categories</strong>等页面一样。</p><p>还有一种常规方式就是创建腾讯公益的404页面，这也是hexo框架下很多用户会采取的404页面。既能有效提示页面不存在，还能做下公益，何乐而不为~</p><p>言归正传，下面是该方式的具体操作步骤👇：</p><ul><li>进入本地hexo目录，输入以下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"404"</span></span><br></pre></td></tr></table></figure><ul><li>打开刚新建的页面文件，默认在 Hexo 文件夹根目录下 /source/404/index.md ，输入以下代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found：该页无法显示</span><br><span class="line">toc: false</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span>                                                                                                                                        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="attr">homePageName</span>=<span class="string">"返回首页"</span> <span class="attr">homePageUrl</span>=<span class="string">"https://www.nickyam.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后部署上传</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h2 id="自定义404-html页面"><a href="#自定义404-html页面" class="headerlink" title="自定义404.html页面"></a>自定义404.html页面</h2><p>看到这里应该会有不少人会和我一样，想<strong>DIY</strong>属于自己的独特404页面，这个过程中本人也进行很多尝试，也总结出一些设置心得，首先推荐一个不错的HTML网站<a href="https://codepen.io/" rel="external nofollow noopener noreferrer" target="_blank"><strong>CodePen</strong></a>，上面有不少可以用来制作404页面的素材源码。</p><p>制作自定义html页面，在hexo主题下会遇到各种<strong>bug</strong>:</p><ul><li><p>404页面只在一级域名下一级子路径下能正常跳转显示，在二级乃至三级···子路径下无法正常显示</p><p>解决方法: 不要使用<strong>相对路径</strong>对依赖文件进行调用！！！使用链接形式对依赖文件进行调用</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//将 .html中下列语句</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">src</span>=<span class="string">"./rain_script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//修改为</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">src</span>=<span class="string">"https://zejinwang.com/rain_script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//注意:不要使用http为前缀的路径，Chrome不支持读取http外链</span><br></pre></td></tr></table></figure><ul><li><p>按照很多博文描述的思路，将html依赖的css文件和js文件放在根目录下的source文件夹下或者source/你创建的page文件夹 下，在经过 hexo g 生成和 hexo d上传后，无法正常调用依赖的两个文件</p><p>解决方法：将依赖的<strong>js</strong>和<strong>css</strong>依赖文件放到主题所在目录的source文件下，而不是hexo根目录下的source文件夹中</p></li></ul><p><strong>创建步骤</strong></p><ul><li><p>创建自定义page文件夹</p><pre><code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"404 not found"</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p>将‘’404 not found‘’文件夹下的index.md文件替换为你准备的index.html文件</p></li><li><p>将index.html文件以来的css和js文件依赖放到主题目录下的source文件夹中</p></li><li><p>修改theme目录下的主题配置文件中menu部分，添加上自定义page信息</p></li></ul><p><img src="/2019/06/25/Hexo-框架下404页面的设置/menu.png" alt="主题配置文件修改部分"></p><p>自定义页面效果展示见<a href="https://zejinwang.com/404_not_found">404特效</a>和<a href="https://zejinwang.com/coderain">源码雨特效</a>。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.nickyam.com/tech/hexo-add-tencent-404-page.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo博客添加腾讯404公益页面</a></p><p><a href="http://www.xnian.top/2017/11/21/hexo%E5%88%9B%E5%BB%BA404%E9%A1%B5%E9%9D%A2/" rel="external nofollow noopener noreferrer" target="_blank">hexo创建404页面</a></p><p><a href="http://yearito.cn/posts/hexo-deploy-to-VPS.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo 搭建个人博客系列：部署上线篇</a></p><blockquote class="blockquote-center"><p><em>Some say the world will end in fire,</em></p><p><em>Some say in ice.</em></p><p><em>From what I’ve tasted of desire</em></p><p><em>I hold with those who favor fire.</em></p><p><em>But if it had to perish twice,</em></p><p><em>I think I know enough of hate</em></p><p><em>To say that for destruction ice</em></p><p><em>Is also great</em></p><p><em>And would suffice.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文主要讲述如何在hexo框架下设置自定义404.html的方法
    
    </summary>
    
      <category term="hexo" scheme="https://zejinwang.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://zejinwang.com/tags/hexo/"/>
    
      <category term="404" scheme="https://zejinwang.com/tags/404/"/>
    
      <category term="自定义" scheme="https://zejinwang.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>一个有关Wang&#39;s Blog诞生的故事</title>
    <link href="https://zejinwang.com/2019/06/22/Hexo-%E6%90%AD%E7%AB%99%E4%BD%93%E9%AA%8C/"/>
    <id>https://zejinwang.com/2019/06/22/Hexo-搭站体验/</id>
    <published>2019-06-22T02:35:22.000Z</published>
    <updated>2019-07-06T02:14:47.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​ 谈到选择何种网站基础框架，自然少不了一番内心的天人交战：<strong>Wordpress</strong>？、<strong>Hexo</strong>?写到这里，其实是我词穷了，本来还想多列举一些可以用作网站搭建的框架，奈何只调研了这两个主要搭站框架<del>此时此刻懒得去查</del>。</p><p>说到上面两个框架，不得不提本人搭站旅程中的艰辛坎坷：</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​ 在本站正式诞生之前，其实本人还搭过一个基于WordPress的网站，算算时间~~该故事不巧发生在北京时间<u>2019年6月15日</u>，传说中的上周…那时的我，还是折腾界的<em>低级玩家</em> ：日常专注于踏踏实实的生活、看paper、上课、写作业，闲了敲敲专业相关的代码。在CSDN上分享<em>paper reading</em>后，发现其排版和网站界面做的真的是奇丑无比，难以忍受 (该观点仅代表 <em>ZejinWang</em> 的立场)。当时在考虑该入简书坑，还是掘金坑，这两家的风格个人还是比较喜欢的。那时的我还是个不懂如何使用VPS，如何创建VPN的萌新，对这一神秘领域又是向往又小心翼翼。</p><p>​ 那么是什么促使我迈入高玩阵列？<del>不是爱</del> 2019年6月1日，在这全中国都洋溢着儿童节快乐气氛的日子里，翻墙界发生了一场波及全体成员的大地震，GFW出手了。此时此刻你还想重温翻车现场氛围的，请转往👉<a href="https://github.com/shadowsocks/shadowsocks-windows/issues/2366" rel="external nofollow noopener noreferrer" target="_blank">shadowsocks玩家的呐喊现场</a>。嗯….很不幸的，室友的VPS被封了，共享给我的VPN不能用了，产生用户粘性的我，只能<em>自力更生，丰衣足食</em>…当时在Bandwagon和Vultr中犹豫许久，强迫症玩家总是任意抠细节，对比各种性能优势。有兴趣的朋友，见<a href="https://zhuanlan.zhihu.com/p/31856700" rel="external nofollow noopener noreferrer" target="_blank">2019优质VPS服务商推荐</a>。最后图稳定和性价比，选择了搬瓦工(学生党经济适用款)。</p><p>​ 配置完shadowsocks server 和 client<em>（加密方式建议 chacha20）</em>就能继续愉快地<strong>科学上网</strong>了，说起来买的套餐一个月有1000G流量，完全用不完。有认识的朋友在浩如烟海的信息流中看到本帖，同时有翻墙需要，请毫不吝啬的<strong>call me</strong>！有机会我多出几个ssh相关的帖子（base <strong>linux</strong> or <strong>censos</strong>），共享给大家。</p><h3 id="WordPress初体验"><a href="#WordPress初体验" class="headerlink" title="WordPress初体验"></a>WordPress初体验</h3><p>​ shadowsocks已经搭建完毕，巨额月流量也足够本人肆意挥霍，高枕无忧~~然而，故事到此才刚刚开始…看着VPS中<strong>1024MB RAM</strong>只使用了<strong>200MB</strong>而已，不足<strong>20%</strong>。这对经常把计算资源利用到极(崩)致(溃)的人，这怎么能忍。查了前人利用VPS常干的事，发现目前而言搭个人博客对我来说是最适合的。Hexo or Wordpress ? 本着操作尽量方便简单，同时保持网站加载速度的原则，当时的我天真的选择了后者。</p><p>​ 折腾WordPress大概也有一周时间吧，没想到看着教程颇为简单的它，在自定义网站环节的操作难度会如此大。估计是我对直接操作UI这方面实在是没什么天赋，就和从小到大我那贫瘠的艺术细胞那样…就这样折腾完后，<em>网站静态页面</em>和<em>博客主页</em>成型了，然而我也决定放弃后续操作，太折腾，太难弄美观了，嗯，先罢工一段时间吧…</p><h3 id="Hexo的见猎心喜"><a href="#Hexo的见猎心喜" class="headerlink" title="Hexo的见猎心喜"></a>Hexo的见猎心喜</h3><p>​ 实习的时候，看到工位边上的张同学在尝试用hexo作为框架搭建个人博客，瞄过几眼后，我心动了…决定再次开工，搭建基于<strong>Hexo + Github</strong>的个人博客。</p><p>​ 确定搭建基于<strong>Hexo + Github</strong>框架的个人博客的方案后，接下来便是付诸实践的时候。当时首先考虑到的是该选择哪款主题作为基础，然后在上面进行个性化定制，此处附hexo官网两百多款主题的<a href="https://hexo.io/themes/" rel="external nofollow noopener noreferrer" target="_blank">直达通道</a>。每当做选择的时候，总是最为心力交瘁的时刻，会进行很细致的效果对比、可操作空间大小、主题是否在及时优化迭代等，各方面因素导致自己在这个阶段浪费了不少时间。</p><p>本人先后尝试了<strong>pure</strong>和<strong>next</strong>，在折腾pure主题的时候，很明显的感觉到pure的作者身为前端开发者，在代码习惯上并不是很OK，主题框架写的有点乱偏私人化，导致修改配置的接口做的不是很好，个性化订制中很容易出各种<strong>bug</strong>，体验很不美丽。最终考虑到next的生态更为完善、可改动空间极大，定稿使用后者。</p><blockquote><p>踩坑心得</p><ul><li>确定好你青睐的配置环境，按序安装相应依赖(版本不兼容对新手很不友好)</li><li>学会更好地搜集资料，选择适合你选择的hexo+next版本的资料</li><li>好的引路人可以让你少走很多弯路，好的教程也一样(推一套无死角教程<del>免费替作者打广告</del>)<ul><li><a href="http://yearito.cn/posts/hexo-get-started.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo 搭建个人博客系列：基础建站篇</a></li><li><a href="http://yearito.cn/posts/hexo-deploy-to-VPS.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo 搭建个人博客系列：部署上线篇</a></li><li><a href="http://yearito.cn/posts/hexo-advanced-settings.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo 搭建个人博客系列：进阶设置篇</a></li><li><a href="http://yearito.cn/posts/hexo-theme-beautify.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo 搭建个人博客系列：主题美化篇</a></li><li><a href="http://yearito.cn/posts/hexo-writing-skills.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo 搭建个人博客系列：写作技巧篇</a></li></ul></li><li>操作细节上<strong>注意备份</strong>！！！作为一名IT从业者，备份意识怎么能不扎根心里…</li></ul></blockquote><blockquote class="blockquote-center"><p><em>Some say the world will end in fire,</em></p><p><em>Some say in ice.</em></p><p><em>From what I’ve tasted of desire</em></p><p><em>I hold with those who favor fire.</em></p><p><em>But if it had to perish twice,</em></p><p><em>I think I know enough of hate</em></p><p><em>To say that for destruction ice</em></p><p><em>Is also great</em></p><p><em>And would suffice.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      这是一篇交代本博客诞生缘由的文章
    
    </summary>
    
    
  </entry>
  
</feed>
